#server.port = 8080
#spring.main.allow-bean-definition-overriding = true
#
###spring.kafka.bootstrap-servers = ${spring.embedded.kafka.brokers}
###kafka.bootstrap-servers = ${spring.embedded.kafka.brokers}
#
#spring.kafka.producer.properties.schema.registry.url= not-used
##spring.kafka.producer.properties.schema.registry.url= http://localhost:8081
#spring.kafka.producer.value-serializer = com.testtask.kafkaspring.customconverter.CustomKafkaAvroSerializer
##spring.kafka.producer.value-serializer = io.confluent.kafka.serializers.KafkaAvroSerializer
#spring.kafka.producer.key-serializer = org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.group-id = showcase-producer-id
#
#spring.kafka.consumer.properties.schema.registry.url= not-used
##spring.kafka.consumer.properties.schema.registry.url= http://localhost:8081
#spring.kafka.consumer.value-deserializer = com.testtask.kafkaspring.customconverter.CustomKafkaAvroDeserializer
##spring.kafka.consumer.value-deserializer = io.confluent.kafka.serializers.KafkaAvroDeserializer
#spring.kafka.consumer.key-deserializer = org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.group-id = showcase-consumer-id
#spring.kafka.auto.offset.reset = earliest
#
#spring.kafka.producer.auto.register.schemas= true
#spring.kafka.properties.specific.avro.reader= true